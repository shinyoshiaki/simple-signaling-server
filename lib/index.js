"use strict";

var _socket = _interopRequireDefault(require("socket.io"));

var _http = _interopRequireDefault(require("http"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

console.log("start");
var srv = new _http.default.Server();
var io = (0, _socket.default)(srv);
srv.listen(process.env.PORT || 20000);
var roomList = {};
io.on("connection", function (socket) {
  console.log("connection");
  socket.on("create", function (data) {
    var roomId = data.roomId;
    console.log("create", roomId);
    roomList[roomId] = {
      hostId: socket.id,
      guestId: ""
    };
    console.log("roomList", roomList);
  });
  socket.on("connect", function (data) {
    var roomId = data.roomId;
    console.log("connected", roomId, socket.id);
    delete roomList[roomId];
    console.log("roomList", roomList);
    var _roomList$roomId = roomList[roomId],
        hostId = _roomList$roomId.hostId,
        guestId = _roomList$roomId.guestId;
    io.sockets.sockets[hostId].disconnect();
    io.sockets.sockets[guestId].disconnect();
  });
  socket.on("join", function (data) {
    var roomId = data.roomId;

    if (Object.keys(roomList).includes(roomId)) {
      try {
        console.log("join", roomId);
        var room = roomList[roomId];
        room.guestId = socket.id;
        console.log("roomList", roomList);
        io.sockets.sockets[socket.id].emit("join", {
          room: roomId
        });
      } catch (error) {
        console.log(error);
      }
    }
  });
  socket.on("sdp", function (data) {
    try {
      var _roomId = data.roomId,
          _sdp = data.sdp;
      var room = roomList[_roomId];

      if (socket.id === room.hostId) {
        if (io.sockets.sockets[room.guestId]) io.sockets.sockets[room.guestId].emit("sdp", {
          sdp: _sdp
        });
      } else {
        if (io.sockets.sockets[room.hostId]) io.sockets.sockets[room.hostId].emit("sdp", {
          sdp: _sdp
        });
      }
    } catch (error) {
      console.log(error);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJjb25zb2xlIiwibG9nIiwic3J2IiwiaHR0cCIsIlNlcnZlciIsImlvIiwibGlzdGVuIiwicHJvY2VzcyIsImVudiIsIlBPUlQiLCJyb29tTGlzdCIsIm9uIiwic29ja2V0IiwiZGF0YSIsInJvb21JZCIsImhvc3RJZCIsImlkIiwiZ3Vlc3RJZCIsInNvY2tldHMiLCJkaXNjb25uZWN0IiwiT2JqZWN0Iiwia2V5cyIsImluY2x1ZGVzIiwicm9vbSIsImVtaXQiLCJlcnJvciIsInNkcCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7OztBQUVBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaO0FBRUEsSUFBTUMsR0FBRyxHQUFHLElBQUlDLGNBQUtDLE1BQVQsRUFBWjtBQUNBLElBQU1DLEVBQUUsR0FBRyxxQkFBU0gsR0FBVCxDQUFYO0FBQ0FBLEdBQUcsQ0FBQ0ksTUFBSixDQUFXQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsSUFBWixJQUFvQixLQUEvQjtBQUVBLElBQU1DLFFBQWdFLEdBQUcsRUFBekU7QUFFQUwsRUFBRSxDQUFDTSxFQUFILENBQU0sWUFBTixFQUFvQixVQUFBQyxNQUFNLEVBQUk7QUFDNUJaLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFlBQVo7QUFFQVcsRUFBQUEsTUFBTSxDQUFDRCxFQUFQLENBQVUsUUFBVixFQUFvQixVQUFDRSxJQUFELEVBQThCO0FBQUEsUUFDeENDLE1BRHdDLEdBQzdCRCxJQUQ2QixDQUN4Q0MsTUFEd0M7QUFFaERkLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFFBQVosRUFBc0JhLE1BQXRCO0FBQ0FKLElBQUFBLFFBQVEsQ0FBQ0ksTUFBRCxDQUFSLEdBQW1CO0FBQUVDLE1BQUFBLE1BQU0sRUFBRUgsTUFBTSxDQUFDSSxFQUFqQjtBQUFxQkMsTUFBQUEsT0FBTyxFQUFFO0FBQTlCLEtBQW5CO0FBQ0FqQixJQUFBQSxPQUFPLENBQUNDLEdBQVIs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O0FBQ0YsS0FYRCxDQVdFLE9BQU9ELEtBQVAsRUFBYztBQUNkekIsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVl3QixLQUFaO0FBQ0Q7QUFDRixHQWZEO0FBZ0JELENBbkREIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNvY2tldGlvIGZyb20gXCJzb2NrZXQuaW9cIjtcbmltcG9ydCBodHRwIGZyb20gXCJodHRwXCI7XG5cbmNvbnNvbGUubG9nKFwic3RhcnRcIik7XG5cbmNvbnN0IHNydiA9IG5ldyBodHRwLlNlcnZlcigpO1xuY29uc3QgaW8gPSBzb2NrZXRpbyhzcnYpO1xuc3J2Lmxpc3Rlbihwcm9jZXNzLmVudi5QT1JUIHx8IDIwMDAwKTtcblxuY29uc3Qgcm9vbUxpc3Q6IHsgW2tleTogc3RyaW5nXTogeyBob3N0SWQ6IHN0cmluZzsgZ3Vlc3RJZDogc3RyaW5nIH0gfSA9IHt9O1xuXG5pby5vbihcImNvbm5lY3Rpb25cIiwgc29ja2V0ID0+IHtcbiAgY29uc29sZS5sb2coXCJjb25uZWN0aW9uXCIpO1xuXG4gIHNvY2tldC5vbihcImNyZWF0ZVwiLCAoZGF0YTogeyByb29tSWQ6IHN0cmluZyB9KSA9PiB7XG4gICAgY29uc3QgeyByb29tSWQgfSA9IGRhdGE7XG4gICAgY29uc29sZS5sb2coXCJjcmVhdGVcIiwgcm9vbUlkKTtcbiAgICByb29tTGlzdFtyb29tSWRdID0geyBob3N0SWQ6IHNvY2tldC5pZCwgZ3Vlc3RJZDogXCJcIiB9O1xuICAgIGNvbnNvbGUubG9nKFwicm9vbUxpc3RcIiwgcm9vbUxpc3QpO1xuICB9KTtcblxuICBzb2NrZXQub24oXCJjb25uZWN0XCIsIChkYXRhOiB7IHJvb21JZDogc3RyaW5nIH0pID0+IHtcbiAgICBjb25zdCB7IHJvb21JZCB9ID0gZGF0YTtcbiAgICBjb25zb2xlLmxvZyhcImNvbm5lY3RlZFwiLCByb29tSWQsIHNvY2tldC5pZCk7XG4gICAgZGVsZXRlIHJvb21MaXN0W3Jvb21JZF07XG4gICAgY29uc29sZS5sb2coXCJyb29tTGlzdFwiLCByb29tTGlzdCk7XG4gICAgY29uc3QgeyBob3N0SWQsIGd1ZXN0SWQgfSA9IHJvb21MaXN0W3Jvb21JZF07XG4gICAgaW8uc29ja2V0cy5zb2NrZXRzW2hvc3RJZF0uZGlzY29ubmVjdCgpO1xuICAgIGlvLnNvY2tldHMuc29ja2V0c1tndWVzdElkXS5kaXNjb25uZWN0KCk7XG4gIH0pO1xuXG4gIHNvY2tldC5vbihcImpvaW5cIiwgKGRhdGE6IHsgcm9vbUlkOiBzdHJpbmcgfSkgPT4ge1xuICAgIGNvbnN0IHsgcm9vbUlkIH0gPSBkYXRhO1xuICAgIGlmIChPYmplY3Qua2V5cyhyb29tTGlzdCkuaW5jbHVkZXMocm9vbUlkKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJqb2luXCIsIHJvb21JZCk7XG4gICAgICAgIGNvbnN0IHJvb20gPSByb29tTGlzdFtyb29tSWRdO1xuICAgICAgICByb29tLmd1ZXN0SWQgPSBzb2NrZXQuaWQ7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicm9vbUxpc3RcIiwgcm9vbUxpc3QpO1xuICAgICAgICBpby5zb2NrZXRzLnNvY2tldHNbc29ja2V0LmlkXS5lbWl0KFwiam9pblwiLCB7IHJvb206IHJvb21JZCB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHNvY2tldC5vbihcInNkcFwiLCAoZGF0YTogeyByb29tSWQ6IHN0cmluZzsgc2RwOiBzdHJpbmcgfSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IHJvb21JZCwgc2RwIH0gPSBkYXRhO1xuXG4gICAgICBjb25zdCByb29tID0gcm9vbUxpc3Rbcm9vbUlkXTtcbiAgICAgIGlmIChzb2NrZXQuaWQgPT09IHJvb20uaG9zdElkKSB7XG4gICAgICAgIGlmIChpby5zb2NrZXRzLnNvY2tldHNbcm9vbS5ndWVzdElkXSlcbiAgICAgICAgICBpby5zb2NrZXRzLnNvY2tldHNbcm9vbS5ndWVzdElkXS5lbWl0KFwic2RwXCIsIHsgc2RwIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlvLnNvY2tldHMuc29ja2V0c1tyb29tLmhvc3RJZF0pXG4gICAgICAgICAgaW8uc29ja2V0cy5zb2NrZXRzW3Jvb20uaG9zdElkXS5lbWl0KFwic2RwXCIsIHsgc2RwIH0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgfVxuICB9KTtcbn0pO1xuIl19