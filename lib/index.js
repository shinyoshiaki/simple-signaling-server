"use strict";

var _socket = _interopRequireDefault(require("socket.io"));

var _http = _interopRequireDefault(require("http"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

console.log("start");
var srv = new _http.default.Server();
var io = (0, _socket.default)(srv);
srv.listen(process.env.PORT || 20000);
var roomList = {};
io.on("connection", function (socket) {
  console.log("connection");
  socket.on("create", function (data) {
    var roomId = data.room;
    console.log("create", roomId);
    roomList[roomId] = {
      hostId: socket.id,
      guestId: ""
    };
    console.log("roomList", roomList);
  });
  socket.on("connect", function (data) {
    var roomId = data.room;
    console.log("connected", roomId, socket.id);
    delete roomList[roomId];
    console.log("roomList", roomList);
    var _roomList$roomId = roomList[roomId],
        hostId = _roomList$roomId.hostId,
        guestId = _roomList$roomId.guestId;
    io.sockets.sockets[hostId].disconnect();
    io.sockets.sockets[guestId].disconnect();
  });
  socket.on("join", function (data) {
    var roomId = data.room;

    if (Object.keys(roomList).includes(roomId)) {
      try {
        console.log("join", roomId);
        var _room = roomList[roomId];
        _room.guestId = socket.id;
        console.log("roomList", roomList);
        io.sockets.sockets[socket.id].emit("join", {
          room: roomId
        });
      } catch (error) {
        console.log(error);
      }
    }
  });
  socket.on("offer", function (data) {
    try {
      var roomId = data.room;
      var _sdp = data.sdp;
      console.log("offer", roomId);
      var _room2 = roomList[roomId];

      io.sockets.sockets[_room2.hostId].emit("offer", {
        sdp: _sdp
      });
    } catch (error) {
      console.log(error);
    }
  });
  socket.on("answer", function (data) {
    try {
      var roomId = data.room;
      var _sdp2 = data.sdp;
      console.log("answer", roomId);
      var _room3 = roomList[roomId];

      io.sockets.sockets[_room3.guestId].emit("answer", {
        sdp: _sdp2
      });
    } catch (error) {
      console.log(error);
    }
  });
  socket.on("ice", function (data) {
    try {
      var roomId = data.room;
      var _candidate = data.candidate;
      var _sdpMline = data.sdpMline;
      var _sdpMid = data.sdpMid;
      console.log("ice", roomId);
      var _room4 = roomList[roomId];

      if (socket.id === _room4.hostId) {
        if (io.sockets.sockets[_room4.guestId]) io.sockets.sockets[_room4.guestId].emit("ice", {
          candidate: _candidate,
          sdpMline: _sdpMline,
          sdpMid: _sdpMid
        });
      } else {
        if (io.sockets.sockets[_room4.hostId]) io.sockets.sockets[_room4.hostId].emit("ice", {
          candidate: _candidate,
          sdpMline: _sdpMline,
          sdpMid: _sdpMid
        });
      }
    } catch (error) {
      console.log(error);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,