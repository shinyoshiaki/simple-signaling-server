"use strict";

var _socket = _interopRequireDefault(require("socket.io"));

var _http = _interopRequireDefault(require("http"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

console.log("start");
var srv = new _http.default.Server();
var io = (0, _socket.default)(srv);
srv.listen(process.env.PORT || 20000);
var roomList = {};
io.on("connection", function (socket) {
  console.log("connection");
  socket.on("create", function (data) {
    var roomId = data.roomId;
    console.log("create", roomId);
    roomList[roomId] = {
      hostId: socket.id,
      guestId: ""
    };
    console.log("roomList", roomList);
  });
  socket.on("connect", function (data) {
    try {
      var _roomId = data.roomId;
      console.log("connected", _roomId, socket.id);
      var _roomList$_roomId = roomList[_roomId],
          _hostId = _roomList$_roomId.hostId,
          _guestId = _roomList$_roomId.guestId;
      delete roomList[_roomId];

      io.sockets.sockets[_hostId].disconnect();

      io.sockets.sockets[_guestId].disconnect();
    } catch (error) {
      console.log({
        error: error
      });
    }
  });
  socket.on("join", function (data) {
    var roomId = data.roomId;

    if (Object.keys(roomList).includes(roomId)) {
      try {
        console.log("join", roomId);
        var room = roomList[roomId];
        room.guestId = socket.id;
        console.log("roomList", roomList);
        io.sockets.sockets[socket.id].emit("join", {
          room: roomId
        });
      } catch (error) {
        console.log(error);
      }
    }
  });
  socket.on("sdp", function (data) {
    try {
      var _roomId2 = data.roomId,
          _sdp = data.sdp;
      var room = roomList[_roomId2];
      console.log("sdp", {
        room: room,
        data: data
      });

      if (socket.id === room.hostId) {
        if (io.sockets.sockets[room.guestId]) io.sockets.sockets[room.guestId].emit("sdp", {
          sdp: _sdp
        });
      } else {
        if (io.sockets.sockets[room.hostId]) io.sockets.sockets[room.hostId].emit("sdp", {
          sdp: _sdp
        });
      }
    } catch (error) {
      console.log(error);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJjb25zb2xlIiwibG9nIiwic3J2IiwiaHR0cCIsIlNlcnZlciIsImlvIiwibGlzdGVuIiwicHJvY2VzcyIsImVudiIsIlBPUlQiLCJyb29tTGlzdCIsIm9uIiwic29ja2V0IiwiZGF0YSIsInJvb21JZCIsImhvc3RJZCIsImlkIiwiZ3Vlc3RJZCIsInNvY2tldHMiLCJkaXNjb25uZWN0IiwiZXJyb3IiLCJPYmplY3QiLCJrZXlzIiwiaW5jbHVkZXMiLCJyb29tIiwiZW1pdCIsInNkcCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7OztBQUVBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaO0FBRUEsSUFBTUMsR0FBRyxHQUFHLElBQUlDLGNBQUtDLE1BQVQsRUFBWjtBQUNBLElBQU1DLEVBQUUsR0FBRyxxQkFBU0gsR0FBVCxDQUFYO0FBQ0FBLEdBQUcsQ0FBQ0ksTUFBSixDQUFXQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsSUFBWixJQUFvQixLQUEvQjtBQUVBLElBQU1DLFFBQWdFLEdBQUcsRUFBekU7QUFNQUwsRUFBRSxDQUFDTSxFQUFILENBQU0sWUFBTixFQUFvQixVQUFBQyxNQUFNLEVBQUk7QUFDNUJaLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFlBQVo7QUFFQVcsRUFBQUEsTUFBTSxDQUFDRCxFQUFQLENBQVUsUUFBVixFQUFvQixVQUFDRSxJQUFELEVBQW1CO0FBQUEsUUFDN0JDLE1BRDZCLEdBQ2xCRCxJQURrQixDQUM3QkMsTUFENkI7QUFFckNkLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFFBQVosRUFBc0JhLE1BQXRCO0FBQ0FKLElBQUFBLFFBQVEsQ0FBQ0ksTUFBRCxDQUFSLEdBQW1CO0FBQUVDLE1BQUFBLE1BQU0sRUFBRUgsTUFBTSxDQUFDSSxFQUFqQjtBQUFxQkMsTUFBQUEsT0FBTyxFQUFFO0FBQTlCLEtBQW5CO0FBQ0FqQixJQUFBQSxPQUFPLENBQUNDLEdBQVIs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QUFYLENBQW1CTSxJQUFJLENBQUNULE1BQXhCLENBQUosRUFDRVYsRUFBRSxDQUFDYSxPQUFILENBQVdBLE9BQVgsQ0FBbUJNLElBQUksQ0FBQ1QsTUFBeEIsRUFBZ0NVLElBQWhDLENBQXFDLEtBQXJDLEVBQTRDO0FBQUVDLFVBQUFBLEdBQUcsRUFBSEE7QUFBRixTQUE1QztBQUNIO0FBQ0YsS0FkRCxDQWNFLE9BQU9OLEtBQVAsRUFBYztBQUNkcEIsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVltQixLQUFaO0FBQ0Q7QUFDRixHQWxCRDtBQW1CRCxDQXpERCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzb2NrZXRpbyBmcm9tIFwic29ja2V0LmlvXCI7XHJcbmltcG9ydCBodHRwIGZyb20gXCJodHRwXCI7XHJcblxyXG5jb25zb2xlLmxvZyhcInN0YXJ0XCIpO1xyXG5cclxuY29uc3Qgc3J2ID0gbmV3IGh0dHAuU2VydmVyKCk7XHJcbmNvbnN0IGlvID0gc29ja2V0aW8oc3J2KTtcclxuc3J2Lmxpc3Rlbihwcm9jZXNzLmVudi5QT1JUIHx8IDIwMDAwKTtcclxuXHJcbmNvbnN0IHJvb21MaXN0OiB7IFtrZXk6IHN0cmluZ106IHsgaG9zdElkOiBzdHJpbmc7IGd1ZXN0SWQ6IHN0cmluZyB9IH0gPSB7fTtcclxuXHJcbmludGVyZmFjZSByb29tT2JqIHtcclxuICByb29tSWQ6IHN0cmluZztcclxufVxyXG5cclxuaW8ub24oXCJjb25uZWN0aW9uXCIsIHNvY2tldCA9PiB7XHJcbiAgY29uc29sZS5sb2coXCJjb25uZWN0aW9uXCIpO1xyXG5cclxuICBzb2NrZXQub24oXCJjcmVhdGVcIiwgKGRhdGE6IHJvb21PYmopID0+IHtcclxuICAgIGNvbnN0IHsgcm9vbUlkIH0gPSBkYXRhO1xyXG4gICAgY29uc29sZS5sb2coXCJjcmVhdGVcIiwgcm9vbUlkKTtcclxuICAgIHJvb21MaXN0W3Jvb21JZF0gPSB7IGhvc3RJZDogc29ja2V0LmlkLCBndWVzdElkOiBcIlwiIH07XHJcbiAgICBjb25zb2xlLmxvZyhcInJvb21MaXN0XCIsIHJvb21MaXN0KTtcclxuICB9KTtcclxuXHJcbiAgc29ja2V0Lm9uKFwiY29ubmVjdFwiLCAoZGF0YTogcm9vbU9iaikgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgeyByb29tSWQgfSA9IGRhdGE7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiY29ubmVjdGVkXCIsIHJvb21JZCwgc29ja2V0LmlkKTtcclxuICAgICAgY29uc3QgeyBob3N0SWQsIGd1ZXN0SWQgfSA9IHJvb21MaXN0W3Jvb21JZF07XHJcbiAgICAgIGRlbGV0ZSByb29tTGlzdFtyb29tSWRdO1xyXG4gICAgICBpby5zb2NrZXRzLnNvY2tldHNbaG9zdElkXS5kaXNjb25uZWN0KCk7XHJcbiAgICAgIGlvLnNvY2tldHMuc29ja2V0c1tndWVzdElkXS5kaXNjb25uZWN0KCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmxvZyh7IGVycm9yIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBzb2NrZXQub24oXCJqb2luXCIsIChkYXRhOiByb29tT2JqKSA9PiB7XHJcbiAgICBjb25zdCB7IHJvb21JZCB9ID0gZGF0YTtcclxuICAgIGlmIChPYmplY3Qua2V5cyhyb29tTGlzdCkuaW5jbHVkZXMocm9vbUlkKSkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiam9pblwiLCByb29tSWQpO1xyXG4gICAgICAgIGNvbnN0IHJvb20gPSByb29tTGlzdFtyb29tSWRdO1xyXG4gICAgICAgIHJvb20uZ3Vlc3RJZCA9IHNvY2tldC5pZDtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInJvb21MaXN0XCIsIHJvb21MaXN0KTtcclxuICAgICAgICBpby5zb2NrZXRzLnNvY2tldHNbc29ja2V0LmlkXS5lbWl0KFwiam9pblwiLCB7IHJvb206IHJvb21JZCB9KTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgc29ja2V0Lm9uKFwic2RwXCIsIChkYXRhOiB7IHJvb21JZDogc3RyaW5nOyBzZHA6IHN0cmluZyB9KSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB7IHJvb21JZCwgc2RwIH0gPSBkYXRhO1xyXG5cclxuICAgICAgY29uc3Qgcm9vbSA9IHJvb21MaXN0W3Jvb21JZF07XHJcblxyXG4gICAgICBjb25zb2xlLmxvZyhcInNkcFwiLCB7IHJvb20sIGRhdGEgfSk7XHJcblxyXG4gICAgICBpZiAoc29ja2V0LmlkID09PSByb29tLmhvc3RJZCkge1xyXG4gICAgICAgIGlmIChpby5zb2NrZXRzLnNvY2tldHNbcm9vbS5ndWVzdElkXSlcclxuICAgICAgICAgIGlvLnNvY2tldHMuc29ja2V0c1tyb29tLmd1ZXN0SWRdLmVtaXQoXCJzZHBcIiwgeyBzZHAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGlvLnNvY2tldHMuc29ja2V0c1tyb29tLmhvc3RJZF0pXHJcbiAgICAgICAgICBpby5zb2NrZXRzLnNvY2tldHNbcm9vbS5ob3N0SWRdLmVtaXQoXCJzZHBcIiwgeyBzZHAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgIH1cclxuICB9KTtcclxufSk7XHJcbiJdfQ==