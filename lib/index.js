"use strict";

var _socket = _interopRequireDefault(require("socket.io"));

var _http = _interopRequireDefault(require("http"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

console.log("start");
var srv = new _http.default.Server();
var io = (0, _socket.default)(srv);
srv.listen(process.env.PORT || 20000);
var roomList = {};
io.on("connection", function (socket) {
  console.log("connection");
  socket.on("create", function (data) {
    var roomId = data.room;
    console.log("create", roomId);
    roomList[roomId] = {
      hostId: socket.id,
      guestId: ""
    };
    console.log("roomList", roomList);
  });
  socket.on("connect", function (data) {
    var roomId = data.room;
    console.log("connected", roomId, socket.id);
    delete roomList[roomId];
    console.log("roomList", roomList);
  });
  socket.on("join", function (data) {
    var roomId = data.room;

    if (Object.keys(roomList).includes(roomId)) {
      try {
        console.log("join", roomId);
        var room = roomList[roomId];
        room.guestId = socket.id;
        console.log("roomList", roomList);
        io.sockets.sockets[socket.id].emit("join", {
          room: roomId
        });
      } catch (error) {
        console.log(error);
      }
    }
  });
  socket.on("offer", function (data) {
    try {
      var roomId = data.room;
      var sdp = data.sdp;
      console.log("offer", roomId);
      var room = roomList[roomId];
      io.sockets.sockets[room.hostId].emit("offer", {
        sdp: sdp
      });
    } catch (error) {
      console.log(error);
    }
  });
  socket.on("answer", function (data) {
    try {
      var roomId = data.room;
      var sdp = data.sdp;
      console.log("answer", roomId);
      var room = roomList[roomId];
      io.sockets.sockets[room.guestId].emit("answer", {
        sdp: sdp
      });
    } catch (error) {
      console.log(error);
    }
  });
  socket.on("ice", function (data) {
    try {
      var roomId = data.room;
      var candidate = data.candidate;
      var sdpMline = data.sdpMline;
      var sdpMid = data.sdpMid;
      console.log("ice", roomId);
      var room = roomList[roomId];

      if (socket.id === room.hostId) {
        if (io.sockets.sockets[room.guestId]) io.sockets.sockets[room.guestId].emit("ice", {
          candidate: candidate,
          sdpMline: sdpMline,
          sdpMid: sdpMid
        });
      } else {
        if (io.sockets.sockets[room.hostId]) io.sockets.sockets[room.hostId].emit("ice", {
          candidate: candidate,
          sdpMline: sdpMline,
          sdpMid: sdpMid
        });
      }
    } catch (error) {
      console.log(error);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,