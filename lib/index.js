"use strict";

var _socket = _interopRequireDefault(require("socket.io"));

var _http = _interopRequireDefault(require("http"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var srv = new _http["default"].Server();
var io = (0, _socket["default"])(srv);
srv.listen(process.env.PORT || 20000);
var roomList = {};
io.on("connection", function (socket) {
  socket.on("create", function (data) {
    var roomId = data.roomId;
    roomList[roomId] = {
      hostId: socket.id,
      guestId: ""
    };
  });
  socket.on("check", function (data) {
    var roomId = data.roomId;
    var exist = roomList[roomId];

    if (exist) {
      socket.emit("check", {
        result: true
      });
    } else {
      socket.emit("check", {
        result: false
      });
    }
  });
  socket.on("connect", function (data) {
    try {
      var roomId = data.roomId;
      var _roomList$roomId = roomList[roomId],
          hostId = _roomList$roomId.hostId,
          guestId = _roomList$roomId.guestId;
      delete roomList[roomId];
      io.sockets.sockets[hostId].disconnect();
      io.sockets.sockets[guestId].disconnect();
    } catch (error) {
      console.log({
        error: error
      });
    }
  });
  socket.on("join", function (data) {
    var roomId = data.roomId;

    if (Object.keys(roomList).includes(roomId)) {
      try {
        var room = roomList[roomId];
        room.guestId = socket.id;
        io.sockets.sockets[socket.id].emit("join", {
          room: roomId
        });
      } catch (error) {
        console.log(error);
      }
    }
  });
  socket.on("sdp", function (data) {
    try {
      var roomId = data.roomId,
          sdp = data.sdp;
      var room = roomList[roomId];

      if (socket.id === room.hostId) {
        if (io.sockets.sockets[room.guestId]) io.sockets.sockets[room.guestId].emit("sdp", {
          sdp: sdp
        });
      } else {
        if (io.sockets.sockets[room.hostId]) io.sockets.sockets[room.hostId].emit("sdp", {
          sdp: sdp
        });
      }
    } catch (error) {
      console.log(error);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJzcnYiLCJodHRwIiwiU2VydmVyIiwiaW8iLCJsaXN0ZW4iLCJwcm9jZXNzIiwiZW52IiwiUE9SVCIsInJvb21MaXN0Iiwib24iLCJzb2NrZXQiLCJkYXRhIiwicm9vbUlkIiwiaG9zdElkIiwiaWQiLCJndWVzdElkIiwiZXhpc3QiLCJlbWl0IiwicmVzdWx0Iiwic29ja2V0cyIsImRpc2Nvbm5lY3QiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJPYmplY3QiLCJrZXlzIiwiaW5jbHVkZXMiLCJyb29tIiwic2RwIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOzs7O0FBRUEsSUFBTUEsR0FBRyxHQUFHLElBQUlDLGlCQUFLQyxNQUFULEVBQVo7QUFDQSxJQUFNQyxFQUFFLEdBQUcsd0JBQVNILEdBQVQsQ0FBWDtBQUNBQSxHQUFHLENBQUNJLE1BQUosQ0FBV0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLElBQVosSUFBb0IsS0FBL0I7QUFFQSxJQUFNQyxRQUFnRSxHQUFHLEVBQXpFO0FBTUFMLEVBQUUsQ0FBQ00sRUFBSCxDQUFNLFlBQU4sRUFBb0IsVUFBQUMsTUFBTSxFQUFJO0FBQzVCQSxFQUFBQSxNQUFNLENBQUNELEVBQVAsQ0FBVSxRQUFWLEVBQW9CLFVBQUNFLElBQUQsRUFBbUI7QUFBQSxRQUM3QkMsTUFENkIsR0FDbEJELElBRGtCLENBQzdCQyxNQUQ2QjtBQUVyQ0osSUFBQUEsUUFBUSxDQUFDSSxNQUFELENBQVIsR0FBbUI7QUFBRUMsTUFBQUEsTUFBTSxFQUFFSCxNQUFNLENBQUNJLEVBQWpCO0FBQXFCQyxNQUFBQSxPQUFPLEVBQUU7QUFBOUIsS0FBbkI7QUFDRCxHQUhEO0FBS0FMLEVBQUFBLE1BQU0sQ0FBQ0QsRUFBUCxDQUFVLE9BQVYsRUFBbUIsVUFBQ0UsSUFBRCxFQUFtQjtBQUFBLFFBQzVCQyxNQUQ0QixHQUNqQkQsSUFEaUIsQ0FDNUJDLE1BRDRCO0FBRXBDLFFBQU1JLEtBQUss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QUksQ0FBQ2QsTUFBeEIsRUFBZ0NJLElBQWhDLENBQXFDLEtBQXJDLEVBQTRDO0FBQUVXLFVBQUFBLEdBQUcsRUFBSEE7QUFBRixTQUE1QztBQUNIO0FBQ0YsS0FaRCxDQVlFLE9BQU9QLEtBQVAsRUFBYztBQUNkQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsS0FBWjtBQUNEO0FBQ0YsR0FoQkQ7QUFpQkQsQ0ExREQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc29ja2V0aW8gZnJvbSBcInNvY2tldC5pb1wiO1xuaW1wb3J0IGh0dHAgZnJvbSBcImh0dHBcIjtcblxuY29uc3Qgc3J2ID0gbmV3IGh0dHAuU2VydmVyKCk7XG5jb25zdCBpbyA9IHNvY2tldGlvKHNydik7XG5zcnYubGlzdGVuKHByb2Nlc3MuZW52LlBPUlQgfHwgMjAwMDApO1xuXG5jb25zdCByb29tTGlzdDogeyBba2V5OiBzdHJpbmddOiB7IGhvc3RJZDogc3RyaW5nOyBndWVzdElkOiBzdHJpbmcgfSB9ID0ge307XG5cbnR5cGUgcm9vbU9iaiA9IHtcbiAgcm9vbUlkOiBzdHJpbmc7XG59O1xuXG5pby5vbihcImNvbm5lY3Rpb25cIiwgc29ja2V0ID0+IHtcbiAgc29ja2V0Lm9uKFwiY3JlYXRlXCIsIChkYXRhOiByb29tT2JqKSA9PiB7XG4gICAgY29uc3QgeyByb29tSWQgfSA9IGRhdGE7XG4gICAgcm9vbUxpc3Rbcm9vbUlkXSA9IHsgaG9zdElkOiBzb2NrZXQuaWQsIGd1ZXN0SWQ6IFwiXCIgfTtcbiAgfSk7XG5cbiAgc29ja2V0Lm9uKFwiY2hlY2tcIiwgKGRhdGE6IHJvb21PYmopID0+IHtcbiAgICBjb25zdCB7IHJvb21JZCB9ID0gZGF0YTtcbiAgICBjb25zdCBleGlzdCA9IHJvb21MaXN0W3Jvb21JZF07XG4gICAgaWYgKGV4aXN0KSB7XG4gICAgICBzb2NrZXQuZW1pdChcImNoZWNrXCIsIHsgcmVzdWx0OiB0cnVlIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzb2NrZXQuZW1pdChcImNoZWNrXCIsIHsgcmVzdWx0OiBmYWxzZSB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIHNvY2tldC5vbihcImNvbm5lY3RcIiwgKGRhdGE6IHJvb21PYmopID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyByb29tSWQgfSA9IGRhdGE7XG4gICAgICBjb25zdCB7IGhvc3RJZCwgZ3Vlc3RJZCB9ID0gcm9vbUxpc3Rbcm9vbUlkXTtcbiAgICAgIGRlbGV0ZSByb29tTGlzdFtyb29tSWRdO1xuICAgICAgaW8uc29ja2V0cy5zb2NrZXRzW2hvc3RJZF0uZGlzY29ubmVjdCgpO1xuICAgICAgaW8uc29ja2V0cy5zb2NrZXRzW2d1ZXN0SWRdLmRpc2Nvbm5lY3QoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coeyBlcnJvciB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIHNvY2tldC5vbihcImpvaW5cIiwgKGRhdGE6IHJvb21PYmopID0+IHtcbiAgICBjb25zdCB7IHJvb21JZCB9ID0gZGF0YTtcbiAgICBpZiAoT2JqZWN0LmtleXMocm9vbUxpc3QpLmluY2x1ZGVzKHJvb21JZCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJvb20gPSByb29tTGlzdFtyb29tSWRdO1xuICAgICAgICByb29tLmd1ZXN0SWQgPSBzb2NrZXQuaWQ7XG4gICAgICAgIGlvLnNvY2tldHMuc29ja2V0c1tzb2NrZXQuaWRdLmVtaXQoXCJqb2luXCIsIHsgcm9vbTogcm9vbUlkIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgc29ja2V0Lm9uKFwic2RwXCIsIChkYXRhOiB7IHJvb21JZDogc3RyaW5nOyBzZHA6IHN0cmluZyB9KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgcm9vbUlkLCBzZHAgfSA9IGRhdGE7XG5cbiAgICAgIGNvbnN0IHJvb20gPSByb29tTGlzdFtyb29tSWRdO1xuXG4gICAgICBpZiAoc29ja2V0LmlkID09PSByb29tLmhvc3RJZCkge1xuICAgICAgICBpZiAoaW8uc29ja2V0cy5zb2NrZXRzW3Jvb20uZ3Vlc3RJZF0pXG4gICAgICAgICAgaW8uc29ja2V0cy5zb2NrZXRzW3Jvb20uZ3Vlc3RJZF0uZW1pdChcInNkcFwiLCB7IHNkcCB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpby5zb2NrZXRzLnNvY2tldHNbcm9vbS5ob3N0SWRdKVxuICAgICAgICAgIGlvLnNvY2tldHMuc29ja2V0c1tyb29tLmhvc3RJZF0uZW1pdChcInNkcFwiLCB7IHNkcCB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgIH1cbiAgfSk7XG59KTtcbiJdfQ==