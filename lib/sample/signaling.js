"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = create;
exports.join = join;

var _socket = _interopRequireDefault(require("socket.io-client"));

var _webrtc4me = _interopRequireDefault(require("webrtc4me"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var url = process.env.NODE_ENV === "production" ? "https://aqueous-earth-75182.herokuapp.com/" : "http://localhost:20000";

var socket = _socket["default"].connect(url);

function create(roomId, trickle) {
  return new Promise(function (resolve) {
    var rtc = new _webrtc4me["default"]({
      nodeId: "answer",
      trickle: trickle
    });
    socket.emit("create", {
      roomId: roomId
    });
    socket.on("sdp", function (data) {
      console.log({
        data: data
      });
      rtc.setSdp(data.sdp);
    });

    rtc.signal = function (sdp) {
      console.log({
        sdp: sdp,
        roomId: roomId
      });
      socket.emit("sdp", {
        sdp: sdp,
        roomId: roomId
      });
    };

    rtc.connect = function () {
      console.log("connect");
      resolve(rtc);
    };

    rtc.onData.subscribe(function (message) {
      console.log({
        message: message
      });
    });
  });
}

function join(roomId, trickle) {
  return new Promise(function (resolve) {
    var rtc = new _webrtc4me["default"]({
      nodeId: "offer",
      trickle: trickle
    });
    socket.emit("join", {
      roomId: roomId
    });
    socket.on("join", function () {
      rtc.makeOffer();
    });
    socket.on("sdp", function (data) {
      console.log({
        data: data
      });
      rtc.setSdp(data.sdp);
    });

    rtc.signal = function (sdp) {
      console.log({
        sdp: sdp,
        roomId: roomId
      });
      socket.emit("sdp", {
        sdp: sdp,
        roomId: roomId
      });
    };

    rtc.connect = function () {
      console.log("connect");
      resolve(rtc);
    };

    rtc.onData.subscribe(function (message) {
      console.log({
        message: message
      });
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYW1wbGUvc2lnbmFsaW5nLnRzIl0sIm5hbWVzIjpbInVybCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsInNvY2tldCIsImNsaWVudCIsImNvbm5lY3QiLCJjcmVhdGUiLCJyb29tSWQiLCJ0cmlja2xlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJydGMiLCJXZWJSVEMiLCJub2RlSWQiLCJlbWl0Iiwib24iLCJkYXRhIiwiY29uc29sZSIsImxvZyIsInNldFNkcCIsInNkcCIsInNpZ25hbCIsIm9uRGF0YSIsInN1YnNjcmliZSIsIm1lc3NhZ2UiLCJqb2luIiwibWFrZU9mZmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRUEsSUFBTUEsR0FBRyxHQUNQQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixZQUF6QixHQUNJLDRDQURKLEdBRUksd0JBSE47O0FBS0EsSUFBTUMsTUFBTSxHQUFHQyxtQkFBT0MsT0FBUCxDQUFlTixHQUFmLENBQWY7O0FBRU8sU0FBU08sTUFBVCxDQUFnQkMsTUFBaEIsRUFBZ0NDLE9BQWhDLEVBQWtEO0FBQ3ZELFNBQU8sSUFBSUMsT0FBSixDQUFvQixVQUFBQyxPQUFPLEVBQUk7QUFDcEMsUUFBTUMsR0FBRyxHQUFHLElBQUlDLHFCQUFKLENBQVc7QUFBRUMsTUFBQUEsTUFBTSxFQUFFLFFBQVY7QUFBb0JMLE1BQUFBLE9BQU8sRUFBUEE7QUFBcEIsS0FBWCxDQUFaO0FBQ0FMLElBQUFBLE1BQU0sQ0FBQ1csSUFBUCxDQUFZLFFBQVosRUFBc0I7QUFBRVAsTUFBQUEsTUFBTSxFQUFOQTtBQUFGLEtBQXRCO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ1ksRUFBUCxDQUFVLEtBQVYsRUFBaUIsVUFBQ0MsSUFBRCxFQUEyQjtBQUMxQ0MsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVk7QUFBRUYsUUFBQUEsSUFBSSxFQUFKQTtBQUFGLE9BQVo7QUFDQUwsTUFBQUEsR0FBRyxDQUFDUSxNQUFKLENBQVdILElBQUksQ0FBQ0ksR0FBaEI7QUFDRCxLQUhEOztBQUtBVCxJQUFBQSxHQUFHLENBQUNVLE1BQUosR0FBYSxVQUFBRCxHQUFHLEVBQUk7QUFDbEJILE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZO0FBQUVFLFFBQUFBLEdBQUcsRUFBSEEsR0FBRjtBQUFPYixRQUFBQSxNQUFNLEVBQU5BO0FBQVAsT0FBWjtBQUNBSixNQUFBQSxNQUFNLENBQUNXLElBQVAsQ0FBWSxLQUFaLEVBQW1CO0FBQUVNLFFBQUFBLEdBQUcsRUFBSEEsR0FBRjtBQUFPYixRQUFBQSxNQUFNLEVBQU5BO0FBQVAsT0FBbkI7QUFDRCxLQUhEOztBQUlBSSxJQUFBQSxHQUFHLENBQUNOLE9BQUosR0FBYyxZQUFNO0FBQ2xCWSxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxTQUFaO0FBQ0FSLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBRCxDQUFQO0FBQ0QsS0FIRDs7QUFJQUEsSUFBQUEsR0FBRyxDQUFDVyxNQUFKLENBQVdDLFNBQVgsQ0FBcUIsVUFBQUMsT0FBTyxFQUFJO0FBQzlCUCxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWTtBQUFFTSxRQUFBQSxPQUFPLEVBQVBBO0FBQUYsT0FBWjtBQUNELEtBRkQ7QUFHRCxHQW5CTSxDQUFQO0FBb0JEOztBQUVNLFNBQVNDLElBQVQsQ0FBY2xCLE1BQWQsRUFBOEJDLE9BQTlCLEVBQWdEO0FBQ3JELFNBQU8sSUFBSUMsT0FBSixDQUFvQixVQUFBQyxPQUFPLEVBQUk7QUFDcEMsUUFBTUMsR0FBRyxHQUFHLElBQUlDLHFCQUFKLENBQVc7QUFBRUMsTUFBQUEsTUFBTSxFQUFFLE9BQVY7QUFBbUJMLE1BQUFBLE9BQU8sRUFBUEE7QUFBbkIsS0FBWCxDQUFaO0FBQ0FMLElBQUFBLE1BQU0sQ0FBQ1csSUFBUCxDQUFZLE1BQVosRUFBb0I7QUFBRVAsTUFBQUEsTUFBTSxFQUFOQTtBQUFGLEtBQXBCO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ1ksRUFBUCxDQUFVLE1BQVYsRUFBa0IsWUFBTTtBQUN0QkosTUFBQUEsR0FBRyxDQUFDZSxTQUFKO0FBQ0QsS0FGRDtBQUdBdkIsSUFBQUEsTUFBTSxDQUFDWSxFQUFQLENBQVUsS0FBVixFQUFpQixVQUFDQyxJQUFELEVBQTJCO0FBQzFDQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWTtBQUFFRixRQUFBQSxJQUFJLEVBQUpBO0FBQUYsT0FBWjtBQUNBTCxNQUFBQSxHQUFHLENBQUNRLE1BQUosQ0FBV0gsSUFBSSxDQUFDSSxHQUFoQjtBQUNELEtBSEQ7O0FBS0FULElBQUFBLEdBQUcsQ0FBQ1UsTUFBSixHQUFhLFVBQUFELEdBQUcsRUFBSTtBQUNsQkgsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVk7QUFBRUUsUUFBQUEsR0FBRyxFQUFIQSxHQUFGO0FBQU9iLFFBQUFBLE1BQU0sRUFBTkE7QUFBUCxPQUFaO0FBQ0FKLE1BQUFBLE1BQU0sQ0FBQ1csSUFBUCxDQUFZLEtBQVosRUFBbUI7QUFBRU0sUUFBQUEsR0FBRyxFQUFIQSxHQUFGO0FBQU9iLFFBQUFBLE1BQU0sRUFBTkE7QUFBUCxPQUFuQjtBQUNELEtBSEQ7O0FBSUFJLElBQUFBLEdBQUcsQ0FBQ04sT0FBSixHQUFjLFlBQU07QUFDbEJZLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFNBQVo7QUFDQVIsTUFBQUEsT0FBTyxDQUFDQyxHQUFELENBQVA7QUFDRCxLQUhEOztBQUlBQSxJQUFBQSxHQUFHLENBQUNXLE1BQUosQ0FBV0MsU0FBWCxDQUFxQixVQUFBQyxPQUFPLEVBQUk7QUFDOUJQLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZO0FBQUVNLFFBQUFBLE9BQU8sRUFBUEE7QUFBRixPQUFaO0FBQ0QsS0FGRDtBQUdELEdBdEJNLENBQVA7QUF1QkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xpZW50IGZyb20gXCJzb2NrZXQuaW8tY2xpZW50XCI7XG5pbXBvcnQgV2ViUlRDIGZyb20gXCJ3ZWJydGM0bWVcIjtcblxuY29uc3QgdXJsID1cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiXG4gICAgPyBcImh0dHBzOi8vYXF1ZW91cy1lYXJ0aC03NTE4Mi5oZXJva3VhcHAuY29tL1wiXG4gICAgOiBcImh0dHA6Ly9sb2NhbGhvc3Q6MjAwMDBcIjtcblxuY29uc3Qgc29ja2V0ID0gY2xpZW50LmNvbm5lY3QodXJsKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShyb29tSWQ6IHN0cmluZywgdHJpY2tsZTogYm9vbGVhbikge1xuICByZXR1cm4gbmV3IFByb21pc2U8V2ViUlRDPihyZXNvbHZlID0+IHtcbiAgICBjb25zdCBydGMgPSBuZXcgV2ViUlRDKHsgbm9kZUlkOiBcImFuc3dlclwiLCB0cmlja2xlIH0pO1xuICAgIHNvY2tldC5lbWl0KFwiY3JlYXRlXCIsIHsgcm9vbUlkIH0pO1xuICAgIHNvY2tldC5vbihcInNkcFwiLCAoZGF0YTogeyBzZHA6IHN0cmluZyB9KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyh7IGRhdGEgfSk7XG4gICAgICBydGMuc2V0U2RwKGRhdGEuc2RwKTtcbiAgICB9KTtcblxuICAgIHJ0Yy5zaWduYWwgPSBzZHAgPT4ge1xuICAgICAgY29uc29sZS5sb2coeyBzZHAsIHJvb21JZCB9KTtcbiAgICAgIHNvY2tldC5lbWl0KFwic2RwXCIsIHsgc2RwLCByb29tSWQgfSk7XG4gICAgfTtcbiAgICBydGMuY29ubmVjdCA9ICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiY29ubmVjdFwiKTtcbiAgICAgIHJlc29sdmUocnRjKTtcbiAgICB9O1xuICAgIHJ0Yy5vbkRhdGEuc3Vic2NyaWJlKG1lc3NhZ2UgPT4ge1xuICAgICAgY29uc29sZS5sb2coeyBtZXNzYWdlIH0pO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGpvaW4ocm9vbUlkOiBzdHJpbmcsIHRyaWNrbGU6IGJvb2xlYW4pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPFdlYlJUQz4ocmVzb2x2ZSA9PiB7XG4gICAgY29uc3QgcnRjID0gbmV3IFdlYlJUQyh7IG5vZGVJZDogXCJvZmZlclwiLCB0cmlja2xlIH0pO1xuICAgIHNvY2tldC5lbWl0KFwiam9pblwiLCB7IHJvb21JZCB9KTtcbiAgICBzb2NrZXQub24oXCJqb2luXCIsICgpID0+IHtcbiAgICAgIHJ0Yy5tYWtlT2ZmZXIoKTtcbiAgICB9KTtcbiAgICBzb2NrZXQub24oXCJzZHBcIiwgKGRhdGE6IHsgc2RwOiBzdHJpbmcgfSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coeyBkYXRhIH0pO1xuICAgICAgcnRjLnNldFNkcChkYXRhLnNkcCk7XG4gICAgfSk7XG5cbiAgICBydGMuc2lnbmFsID0gc2RwID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKHsgc2RwLCByb29tSWQgfSk7XG4gICAgICBzb2NrZXQuZW1pdChcInNkcFwiLCB7IHNkcCwgcm9vbUlkIH0pO1xuICAgIH07XG4gICAgcnRjLmNvbm5lY3QgPSAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcImNvbm5lY3RcIik7XG4gICAgICByZXNvbHZlKHJ0Yyk7XG4gICAgfTtcbiAgICBydGMub25EYXRhLnN1YnNjcmliZShtZXNzYWdlID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKHsgbWVzc2FnZSB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=